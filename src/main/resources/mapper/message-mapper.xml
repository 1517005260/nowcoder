<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.dao.MessageMapper">
    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <select id="selectConversations" resultType="Message">
        select message.id, from_id, to_id, conversation_id, content, message.status, create_time
        from message
        where message.id in (
        select max(message.id)
        from message join community.user_message_status ums on message.id = ums.message_id
        where ums.status != 2
        and from_id !=1
        and (from_id = #{userId} or to_id = #{userId})
        and ums.user_id = #{userId}
        group by conversation_id
        )
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectConversationCount" resultType="int">
        select count(m.maxid)
        from (
                 select max(message.id) as maxid
                 from message join community.user_message_status ums on message.id = ums.message_id
                 where ums.status != 2
                   and from_id !=1
                   and (from_id = #{userId} or to_id = #{userId})
                   and ums.user_id = #{userId}
                 group by conversation_id
             ) as m
    </select>


    <select id="selectLetters" resultType="Message">
        select message.id, from_id, to_id, conversation_id, content, message.status, create_time
        from message join community.user_message_status ums on message.id = ums.message_id
        where ums.status != 2
        and from_id  != 1
        and conversation_id = #{conversationId}
        and ums.user_id = #{userId}
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectLetterCount" resultType="int">
        select count(message.id)
        from message join community.user_message_status ums on message.id = ums.message_id
        where ums.status != 2
          and from_id  != 1
          and conversation_id = #{conversationId}
          and ums.user_id = #{userId}
    </select>


    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status = 0
          and from_id != 1
        and to_id = #{userId}
        <if test="conversationId != null">
            and conversation_id = #{conversationId}
        </if>
    </select>


    <insert id="insertMessage" parameterType="Message" keyProperty="id">
        insert into message (from_id, to_id, conversation_id, content, status, create_time)
        values (#{fromId}, #{toId}, #{conversationId}, #{content}, #{status}, #{createTime})
    </insert>

    <insert id="insertUserMessageStatus" parameterType="map">
        insert into user_message_status (user_id, message_id, status)
        values (#{userId}, #{messageId}, #{status})
    </insert>

    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <update id="deleteMessage">
        update user_message_status set status = #{status}
        where user_id = #{userId} and message_id in
        <foreach collection="messageIds" item="messageId" open="(" separator="," close=")">
            #{messageId}
        </foreach>
    </update>

    <select id="selectLatestNotice" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2 and from_id = 1
            and to_id = #{userId}
            and conversation_id = #{topic}
        )
    </select>

    <select id="selectNoticeCount" resultType="int">
        select count(id) from message
        where status != 2 and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
    </select>

    <select id="selectNoticeUnreadCount" resultType="int">
        select count(id) from message
        where status = 0 and from_id = 1
          and to_id = #{userId}
          <if test="topic!=null">
              and conversation_id = #{topic}
        </if>
    </select>

    <select id="selectNotice" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
        order by create_time desc
        limit #{offset}, #{limit}
    </select>

</mapper>